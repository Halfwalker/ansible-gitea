---
- name: Verify
  hosts: all
  become: true
  gather_facts: true
  vars:
    # goss_version: 0.3.13
    goss_arch: amd64
    goss_bin: /usr/local/bin/goss
    # goss_sha256sum: eb3522ff9682736ff61e2ad114de227de98debcf8a03ca66fcda3917577313e0.
    goss_test_directory: /tmp/molecule/goss
    goss_format: documentation
    goss_vars: "{{ goss_test_directory }}/vars"
    copy_defaults_vars: true
  tasks:

    # https://github.com/ansible-community/molecule-goss/issues/14

    - name: Get latest release for goss
      uri:
        url: "https://api.github.com/repos/aelsabbahy/goss/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
        force_basic_auth: "{% if lookup('env', 'GH_USER') %}yes{% else %}no{% endif %}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: "Set goss_version to {{ _latest_release.json.tag_name[1:] }}"
      set_fact:
        goss_version: "{{ _latest_release.json.tag_name[1:] }}"
      when: _latest_release is defined

    - name: Debug
      debug:
        var: goss_version

    # Can do some magic here to handle multiple architectures
    - name: Get checksum for amd64
      set_fact:
        goss_sha256sum: "{{ item.split(' ')[0] }}"
      with_items:
        - "{{ lookup('url', 'https://github.com/aelsabbahy/goss/releases/download/v' + goss_version + '/goss-linux-amd64.sha256', wantlist=True) | list }}"

    - name: Download and install Goss
      get_url:
        url: "https://github.com/aelsabbahy/goss/releases/download/v{{ goss_version }}/goss-linux-{{ goss_arch }}"
        dest: "{{ goss_bin }}"
        checksum: "sha256:{{ goss_sha256sum }}"
        mode: 0755

    - name: Create Molecule directory for test files  # noqa risky-file-permissions
      file:
        path: "{{ goss_test_directory }}"
        state: directory

    - name: Find Goss tests on localhost
      find:
        paths: "{{ lookup('env', 'MOLECULE_VERIFIER_TEST_DIRECTORY') }}"
        patterns:
          - "test[-.\\w]*.yml"
          - "test_host_{{ ansible_hostname }}[-.\\w]*.yml"
        excludes:
          - "test_host_(?!{{ ansible_hostname }})[-.\\w]*.yml"
        use_regex: true
      delegate_to: localhost
      register: test_files
      changed_when: false
      become: false

    - name: Debug
      debug:
        msg: "{{ test_files.files }}"
        verbosity: 3

    - name: Copy defaults vars to goss vars
      copy:
        src: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/defaults/main.yml"
        dest: "{{ goss_vars }}"
        mode: 0644
      when: copy_defaults_vars

    - name: Get info on containers for {{ ansible_distribution_release }}
      community.general.docker_container_info:
        name: "{{ item }}-ubuntu-{{ ansible_distribution_release }}"
        docker_host: "{{ docker_host }}"
      register: container_info
      loop:
        - gitea
        - drone
        - drone-runner

    # json output
    #   container name is in .container_info.results[0].invocation.module_args.name
    #   container IP is in   .container_info.results[0].container.NetworkSettings.IPAddress

    - name: Create facts
      set_fact:
        container_ip_addresses: "{{ container_info.results | json_query(jmesquery) }}"
      vars:
        jmesquery: "[*].{name: invocation.module_args.name, ip: container.NetworkSettings.IPAddress}"

    - debug:
        var: container_ip_addresses
      # ok: [instance-ubuntu2204] => {
      #     "container_ip_addresses": [
      #         {
      #             "ip": "172.17.0.4",
      #             "name": "gitea-ubuntu-jammy"
      #         },
      #         {
      #             "ip": "172.17.0.5",
      #             "name": "drone-ubuntu-jammy"
      #         },
      #         {
      #             "ip": "172.17.0.6",
      #             "name": "drone-runner-ubuntu-jammy"
      #         }
      #     ]
      # }

    - debug:
        msg: " gitea is {{ item }}"
      loop: "{{ container_info | json_query(ip_addresses) }}"
      vars:
        ip_addresses: "results[?invocation.module_args.name == `gitea-ubuntu-jammy`].container.NetworkSettings.IPAddress"

    - debug:
        msg: " {{ item }} is {{ container_info | json_query(ip_addresses) | first }}"
      vars:
        ip_addresses: "results[?invocation.module_args.name == `{{ item }}-ubuntu-{{ ansible_distribution_release }}`].container.NetworkSettings.IPAddress"
      loop:
        - gitea
        - drone
        - drone-runner

    - name: Create fact
      set_fact:
        container_fact: "{{ container_fact | default([]) + [container_template] }}"
      vars:
        ip_addresses: "results[?invocation.module_args.name == `{{ item }}-ubuntu-{{ ansible_distribution_release }}`].container.NetworkSettings.IPAddress"
        container_template:
          name: "{{ item }}-ubuntu-{{ ansible_distribution_release }}"
          ip: "{{ container_info | json_query(ip_addresses) | first }}"
      loop:
        - gitea
        - drone
        - drone-runner

    - debug:
        var: container_fact

    #
    # Have to remove the dash (-) from the drone-runner name because goss
    # cannot handle a dash in a variable name like {{ .Vars.drone-runner.ip }}
    #
    - name: Create dict
      set_fact:
        container_dict: "{{ container_dict | default({}) | combine({item | regex_replace('-'): {container.c_name: container.name, container.c_ip: container.ip}}) }}"
      vars:
        ip_addresses: "results[?invocation.module_args.name == `{{ item }}-ubuntu-{{ ansible_distribution_release }}`].container.NetworkSettings.IPAddress"
        container:
          c_name: "name"
          c_ip: "ip"
          name: "{{ item }}-ubuntu-{{ ansible_distribution_release }}"
          ip: "{{ container_info | json_query(ip_addresses) | first }}"
      loop:
        - gitea
        - drone
        - drone-runner

    - debug:
        var: container_dict

    - name: Copy Goss tests to remote  # noqa risky-file-permissions
      copy:
        src: "{{ item.path }}"
        dest: "{{ goss_test_directory }}/{{ item.path | basename }}"
      with_items:
        - "{{ test_files.files }}"

    - name: Register test files
      shell: "ls {{ goss_test_directory }}/test_*.yml"  # noqa no-changed-when
      register: test_files

    - name: Execute Goss tests
      # command: "{{ goss_bin }} -g {{ item }} validate --format {{ goss_format }}"  # noqa no-changed-when
      # --vars-inline '{ container_suffix: {{ ansible_distribution_release }} }'
      command:
        "{{ goss_bin }}
         {% if copy_defaults_vars %}
         --vars {{ goss_vars }}
         {% endif %}
        --vars-inline '{{ container_dict }}'
         -g {{ item }} validate --format {{ goss_format }}"
      register: test_results
      with_items: "{{ test_files.stdout_lines }}"
      failed_when: false

    - name: Display details about the Goss results
      debug:
        msg: "{{ item.stdout_lines }}"
      with_items: "{{ test_results.results }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
